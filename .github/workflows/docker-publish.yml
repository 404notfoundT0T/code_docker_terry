name: Docker Build and Test

on:
  schedule:
    - cron: '30 20 * * *'
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      # --- 构建阶段 ---
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Log into registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push
        id: build-push
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # 关键修改：显式导出镜像到本地
          outputs: type=docker,dest=/tmp/image.tar

      # --- 测试阶段 ---
      - name: Load built image
        run: |
          docker load --input /tmp/image.tar
          docker images

      - name: Download test data
        run: |
          mkdir -p test_data
          wget -O test_data/test_R1.fastq.gz https://zenodo.org/record/3736457/files/ERR011347_1.fastq.gz
          wget -O test_data/test_R2.fastq.gz https://zenodo.org/record/3736457/files/ERR011347_2.fastq.gz

      - name: Run functional test
        run: |
          mkdir -p output
          # 使用精确的镜像ID
          IMAGE_ID=$(docker images -q ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest)
          docker run --rm \
            -v $(pwd)/test_data:/mnt/in \
            -v $(pwd)/output:/mnt/out \
            $IMAGE_ID

      - name: Verify outputs
        run: |
          # 检查输出文件
          ls -lh output/
          test -f output/test_trimmed_R1.fastq.gz || (echo "Missing R1 output"; exit 1)
          test -f output/test_trimmed_R2.fastq.gz || (echo "Missing R2 output"; exit 1)
          test -f output/test_fastp.html || (echo "Missing HTML report"; exit 1)
          
          # 验证文件完整性
          gzip -t output/test_trimmed_R1.fastq.gz
          gzip -t output/test_trimmed_R2.fastq.gz

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: fastp-reports
          path: |
            output/*.html
            output/*.json
